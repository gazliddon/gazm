 org $9900
         include "equates.s"

start
         lda #$55

         tfr a,cc
         lds #stack_top

         jsr clear_screen

         lda #0
         sync

         ;; copy the palette over

         lda #255
         sta palette+3
         lda #127
         sta palette+4
         lda #0
         sta palette+5
                  ;;  akjakjak
loop1    inc palette+15*3
         inc palette+15*3
         inc palette+15*3
         lda palette+15
         lsra
         sta palette+15*3+1
         ldx #0
         bsr draw_box
         jsr print_a
         sync
         nop
         nop
         bra loop1

clear_screen
         ldy #screen
         ldd #0
loop2
         std ,y++
         cmpy #screen+screen_size_bytes
         bne loop2
         rts
font
         fdb small_a
         fdb small_b
         fdb small_c

small_a
         fdb $fff0
         fdb $f0f0
         fdb $fff0
         fdb $f0f0
         fdb $f0f0
         fdb $0000

small_a_2
         fdb $fff0,$f0f0,$fff0
         fdb $f0f0,$ff00,$0000
         fdb $0,$0,$0



small_b
         fdb $fff0
         fdb $f0f0
         fdb $ff00
         fdb $f0f0
         fdb $fff0
         fdb $0000
small_c
         fdb $0f00
         fdb $f0f0
         fdb $f000
         fdb $f0f0
         fdb $0f00
         fdb $0000


;; draw a block
;; a = col
;; x = addr

;;yxba
draw_box
         pshs u
         ldy small_a_2
         ldx small_a_2+2
         ldd small_a_2+4

         ldu #screen+6
         pshu a,b,x,y

         ldy small_a_2+0+6
         ldx small_a_2+2+6
         ldd small_a_2+4+6
         ldu #screen+6+0x100
         pshu a,b,x,y
         
         ldy small_a_2+0+12
         ldx small_a_2+2+12
         ldd small_a_2+4+12
         ldu #screen+6+0x200
         pshu a,b,x,y

         puls u
         rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; x -> palette entry
;; y -> table
;; dd = speed through table

init_x equ 0
init_y equ 2
init_d equ 4

palette_cycler
         std task.temp0,u
         ldd #@resume
         std task.func,u
         ldd #0
@resume

        rts

;; x -> reg_init
;; dd = speed through table

alloc_with_init
        pshs x
        jsr task_alloc
        puls x

        ldd init_d,x
        std task.d,y

        ldd init_x,x
        std task.x,y

        ldd init_y,x
        std task.y,y
        rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; x -> palette to read from

copy_pal
         lda #61*3-1
         pshu a
         ldy #palette

loop4
         ldd ,x++
         std ,y++
         dec ,u
         bpl loop4
         rts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; u -> data
;; x -> screen
print_a
         sts save_s
         ldx #screen+0x800+6*3
         ldu #lett_a
         lds save_s
         rts
         jmp print_6x6

print_6x6
         sts save_s

         stx orig_scr
         tfr x,s

         pulu x,y,a,b
         pshs x,y,a,b

         dec orig_scr
         lds orig_scr
         pulu x,y,a,b
         pshs x,y,a,b

         dec orig_scr
         lds orig_scr
         pulu x,y,a,b
         pshs x,y,a,b

         lds save_s
         rts

orig_scr
         fdb 0x00
         fdb 0x00

save_s
         fdb 0x00
         fdb 0x00

lett_a
         fdb 0x00
         fdb 0xf0
         fdb 0xf0
         fdb 0xf0
         fdb 0xf0
         fdb 0x00

         fdb 0x00
         fdb 0x00
         fdb 0x00
         fdb 0xff
         fdb 0x00
         fdb 0xff

         fdb 0x00
         fdb 0xf0
         fdb 0xf0
         fdb 0xff
         fdb 0x00
         fdb 0x0f



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; clear_scren
;; clear the screen to pixel pair in a
screen_clear
         pshs u

         ldu #screen
         ;; fill registers with clear colour
         tfr a,b ;; d = a a
         tfr a,dp
         tfr d,x
         tfr d,y

loopclear
         ;; stack blasts 36 * 7 bytes + 4 bytes = 256 bytes
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu a,b,d,x,y
         pshu x,y
         ;;
         cmpu #screen + screen_size_bytes
         bne loopclear

         puls u
         rts


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    include "tasker.s"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
reserved 
sw3vec
sw2vec
frqvec
irqvec
swivec
nmivec

forever_loop
         bra forever_loop

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ustack
         fill 0,256
ustack_top

stack
         fill 1,256
stack_top

pad equ $fff0-*
         fill 2,pad

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

         fdb  $0000 
v0       fdb  sw3vec
v1       fdb  sw2vec
v2       fdb  frqvec
v3       fdb  irqvec
v4       fdb  swivec
nmi_v

